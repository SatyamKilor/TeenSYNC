<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test Chatting</title>
</head>
<link
    href="https://cdn.jsdelivr.net/npm/remixicon@4.5.0/fonts/remixicon.css"
    rel="stylesheet"
/>

<style>
    :root {
    --purple: #9333ea;
    --light-blue: #6366f1;
    --dark-blue: #302b63;
    --dark-gray: #374151;
    --medium-gray: #9ca3af;
    --white: #ffffff;
    --light-purple: #8b5cf6;
    --black: #0f0c29;
    --background: #0f172a;
    --surface: #1e293b;
    --surface-lighter: #334155;
    --text-primary: #f1f5f9;
    --text-secondary: #94a3b8;
    --border-color: #334155;
}

body {
    background: linear-gradient(to bottom, var(--background), var(--dark-blue));
    color: var(--text-primary);
    font-family: sans-serif;
    margin: 0;
    height: 100vh;
    overflow: hidden;
}

.window {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    height: 80%;
    width: 70%;
    background-color: var(--surface);
    border: 1px solid var(--border-color);
    border-radius: 20px;
    display: flex;
    overflow: hidden;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
}


.chatArea {
    height: 100%;
    width: 100%;
    border-radius: 20px;
    display: flex;
    flex-direction: column;
}

.chatArea .top {
    position: relative;
    height: 20%;
    width: 100%;
    border-bottom: 1px solid var(--border-color);
    display: flex;
    align-items: center;
    justify-content: center;
}

.chatArea .bottom {
    position: relative;
    height: 80%;
    width: 100%;
}

.chatArea .bottom .sendMessageArea {
    height: 10%;
    width: 100%;
    background-color: var(--surface) ;
    position: absolute;
    bottom: 0;
    display: flex;
    align-items: center;
    justify-content: space-evenly;
    border-top: 1px solid var(--border-color);
}

.message-container {
    height: 90%;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    margin-bottom: 10px;
    padding: 10px;
}

.message-container::-webkit-scrollbar {
    display: none;
}

.userMessage {
    width: fit-content;
    border-radius: 20px;
    background-color: var(--surface-lighter);
    margin-right: 10px;
    padding: 10px;
    align-self: flex-end;
    color: var(--text-primary);
}

.otherUserMessage {
    width: fit-content;
    border-radius: 20px;
    background-color: rgba(var(--light-blue-rgb, 99, 102, 241), 0.8);
    margin-left: 10px;
    padding: 10px;
    align-self: flex-start;
    color: var(--text-primary);
}

.ri-arrow-left-circle-line {
    font-size: 50px;
    color: var(--light-blue);
    margin: 10px;
    cursor: pointer;
}

.otherUsersList::-webkit-scrollbar {
    display: none;
}

#message {
    width: 80%;
    height: 35px;
    padding-left: 10px;
    border: 1px solid var(--border-color);
    border-radius: 5px;
    background-color: var(--surface-lighter);
    color: var(--text-primary);
}

#sendBtn {
    width: 15%;
    height: 30px;
    background-color: var(--light-blue);
    border: none;
    border-radius: 10px;
    cursor: pointer;
    color: var(--white);
    transition: background-color 0.3s ease;
}

#sendBtn:hover {
    background-color: var(--light-purple);
}
</style>
<body>
    <a href="/chat" style="text-decoration: none; color: black;">
        <i class="ri-arrow-left-circle-line"></i>
    </a> 
    <div class="window">

       

        <div class="chatArea">
            <div class="top">
                <h1 style="position: absolute; left: 50%; top: 20%; transform: translate(-50%, -50%);">Chatting with: <%= recUser.username %></h1>
            </div>
            <div class="bottom">

                <div class="message-container">
                    <% let messages = conversation?.messages %>
                    <% if(!messages){ %>

                    <% } else { %>
                    <% messages.map((message)=>{ %>
                        <% if(message.senderId.toString() === loggedUser._id){ %>
                            <p class="userMessage"><%= message.message %></p>
                        <% }else{ %>
                            <p class="otherUserMessage"><%= message.message %></p>
                        <% } %>
                    <% }) %>
                    <% } %>
                    
                </div>

                <form  action="" class="sendMessageArea">
                    <input type="text" name="message" id="message" style="width: 80%; ;height: 30px; padding-left: 5px;" >
                    <input id="sendBtn" type="submit" value="Send" >
                </form>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
      
        const form = document.querySelector('.sendMessageArea');
        const messageInput = document.querySelector('#message');
        const sendBtn = document.querySelector('#sendBtn');
        const receiverId = "<%= recUser._id %>"; // Receiver's user ID from the server (via EJS)
        const loggedInUserId = "<%= loggedUser._id %>"; // Logged-in user's ID
    
        // Emit to inform the server that the user is connected
        socket.emit('userConnected', loggedInUserId);
    
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            const message = messageInput.value;

            const messageContainer = document.querySelector('.message-container');
            const messageElement = document.createElement('p');
            messageElement.classList.add('userMessage');
            messageElement.textContent = message;
            messageContainer.appendChild(messageElement);
            messageContainer.scrollTop = messageContainer.scrollHeight;

            if (message) {
                // Emit the message, sender's ID, and receiver's ID to the server
                socket.emit('sendMessage', message, receiverId.toString(), loggedInUserId.toString());
                messageInput.value = ''; // Clear the input
            }
        });
    
        // Listen for the 'receiveMessage' event to display messages
        socket.on('receiveMessage', (data) => {
            // Access the message and senderId from the data object
            const { message, senderId } = data;
            
            const messageContainer = document.querySelector('.message-container');
            const messageElement = document.createElement('p');
            

            messageElement.classList.add('otherUserMessage');
            messageElement.textContent = message;
            messageContainer.appendChild(messageElement);
            messageContainer.scrollTop = messageContainer.scrollHeight; // Scroll to the bottom
        });
    </script>
    
    

    
</body>
</html>